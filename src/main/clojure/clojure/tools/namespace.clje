(ns clojure.tools.namespace)

(defn clojure-source-file?
  "DEPRECATED; moved to clojure.tools.namespace.file

  Returns true if file is a normal file with a .clj or .cljc extension."
  {:deprecated "0.2.1"
   :added "0.1.0"}
  [file]
  (and (filelib/is_regular file)
       (#{".clje" ".cljc"} (filename/extension file))))

(defn find-clojure-sources-in-dir
  "DEPRECATED; moved to clojure.tools.namespace.find

  Searches recursively under dir for Clojure source files (.clje, .cljc).
  Returns a sequence of paths, in breadth-first sort order."
  {:deprecated "0.2.1"
   :added "0.1.0"}
  [dir]
  ;; Use sort by absolute path to get breadth-first search.
  (sort-by #(filename/absname %)
           (filter clojure-source-file? (file-seq dir))))

(defn comment?
  "DEPRECATED; moved to clojure.tools.namespace.parse

  Returns true if form is a (comment ...)"
  {:deprecated "0.2.1"
   :added "0.1.0"}
  [form]
  (and (list? form) (= 'comment (first form))))

(defn ns-decl?
  "DEPRECATED; moved to clojure.tools.namespace.parse

  Returns true if form is a (ns ...) declaration."
  {:deprecated "0.2.1"
   :added "0.1.0"}
  [form]
  (and (list? form) (= 'ns (first form))))

(defn read-ns-decl
  "DEPRECATED; moved to clojure.tools.namespace.parse

  Attempts to read a (ns ...) declaration from rdr, and returns the
  unevaluated form.  Returns nil if read fails or if a ns declaration
  cannot be found.  The ns declaration must be the first Clojure form
  in the file, except for (comment ...)  forms."
  {:deprecated "0.2.1"
   :added "0.1.0"}
  [^erlang.io.PushbackReader rdr]
  (try
   (loop [] (let [form (doto (read rdr) str)]
              (cond
                (ns-decl? form) form
                (comment? form) (recur)
                :else nil)))
   (catch clojerl.Error e nil)))

(defn read-file-ns-decl
  "DEPRECATED; moved to clojure.tools.namespace.file

  Attempts to read a (ns ...) declaration from file, and returns the
  unevaluated form.  Returns nil if read fails, or if the first form
  is not a ns declaration."
  {:deprecated "0.2.1"
   :added "0.1.0"}
  [file]
  (with-open [rdr (erlang.io.PushbackReader. (erlang.io.File. file))]
    (read-ns-decl rdr)))

(defn find-ns-decls-in-dir
  "DEPRECATED; moved to clojure.tools.namespace.find

  Searches dir recursively for (ns ...) declarations in Clojure
  source files; returns the unevaluated ns declarations."
  {:deprecated "0.2.1"
   :added "0.1.0"}
  [dir]
  (filter identity (map read-file-ns-decl (find-clojure-sources-in-dir dir))))

(defn find-namespaces-in-dir
  "DEPRECATED; moved to clojure.tools.namespace.find

  Searches dir recursively for (ns ...) declarations in Clojure
  source files; returns the symbol names of the declared namespaces."
  [dir]
  (map second (find-ns-decls-in-dir dir)))
